// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

@mixin shadow-border( $shadow-color: $black ) {
	box-shadow: 0 0 10px 0 $shadow-color;
}

@mixin shadow-border-bottom( $shadow-color: $black ) {
	box-shadow: 0 0 10px 0px $shadow-color;
}

// If has admin bar
@mixin admin-sticky-fix( $offset: 0 ) {
	$narrow-offset: 46px;
	$wide-offset: 31px;
	$mobile-offset: 0;

	@if $offset != 0 and type-of($offset) == 'number' {
		$narrow-offset: $narrow-offset + $offset;
		$wide-offset: $wide-offset + $offset;
	}
	.admin-bar & {
		top : $mobile-offset !important;

		@media screen and (min-width: 600px) {
			top: $narrow-offset !important;
		}

		@media screen and (min-width: 783px) {
			top: $wide-offset !important;
		}
	}
}

@mixin widget-icon($icon: "" ) {
	li {
		position: relative;
		padding: 0.5rem 0.5em 0.5em 2.0em;

		&:before {
			content: $icon;
			color: $primary-color;
			font-family: "FontAwesome";
			font-size: 1.2em;
			padding: 0 0.5rem;
			position: absolute;
			left: 0;
			top: 50%;
			transform: translateY(-50%);
		}
	}
}

// Shamelessly stolen from https://www.sitepoint.com/building-linear-gradient-mixin-sass/

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
/// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
@function legacy-direction($value) {
	@if is-direction($value) == false {
		@error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
	}

	$conversion-map: (to top: bottom, to top right: bottom left, to right top: left bottom, to right: left, to bottom right: top left, to right bottom: left top, to bottom: top, to bottom left: top right, to left bottom: right top, to left: right, to left top: right bottom, to top left: bottom right);

	@if map-has-key($conversion-map, $value) {
		@return map-get($conversion-map, $value);
	}

	@return 90deg - $value;
}

/// Test if `$value` is a valid direction
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
	$is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
	$is-angle: type-of($value) == "number" and index("deg" "grad" "turn" "rad", unit($value));

	@return $is-keyword or $is-angle;
}

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {Keyword | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
	@if is-direction($direction) == false {
		$color-stops: $direction, $color-stops;
		$direction: 180deg;
	}

	background-color: nth(nth($color-stops, 1), 1);
	background-image: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
	background-image: linear-gradient($direction, $color-stops);
}

@mixin key-animations( $animation, $time: 0.5s ) {
	-webkit-animation: $animation $time; /* Safari, Chrome and Opera > 12.1 */
	-moz-animation: $animation $time;	 /* Firefox < 16 */
	-ms-animation: $animation $time;	 /* Internet Explorer */
	-o-animation: $animation $time;		 /* Opera < 12.1 */
	animation: $animation $time;
}

@mixin prefix($declarations, $prefixes: ()) {
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }

    // Output standard non-prefixed declaration
    #{$property}: $value;
  }
}
